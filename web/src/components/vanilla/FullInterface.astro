---
const { index = 1, class: className, ...rest } = Astro.props
const slides = Array.from({ length: 30 + Math.random() * 10 }, (_, i) => i)
---

<!-- controls -->
<div
  class="py-lg px-lgx md:pt-lg flex flex-col gap-8 text-xs md:flex-row md:items-end"
>
  <div class="pt-xl flex flex-col gap-3 md:pt-0">
    <h3 class="text-sm font-bold tracking-tight text-gray-300">Read.</h3>
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Slide
        <span data-1="slideval" class="mono text-gray-400">0</span>
      </p>
    </div>

    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Progress
        <span data-1="progressval" class="mono text-gray-400">0</span>
      </p>
      <div class="h-1 outline outline-gray-800">
        <div data-1="progress" class="h-full w-full origin-left bg-gray-400">
        </div>
      </div>
    </div>
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Speed
        <span data-1="speedval" class="mono text-gray-400">0</span>
      </p>
      <div class="flex h-3 justify-center outline outline-gray-800">
        <div data-1="speed" class="h-full w-[2px] bg-gray-400"></div>
      </div>
    </div>
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Current
        <span data-1="currentval" class="mono text-gray-400">0</span>
      </p>
      <div class="h-1 outline outline-gray-800">
        <div data-1="current" class="h-full w-full origin-left bg-gray-400">
        </div>
      </div>
    </div>
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Target
        <span data-1="targetval" class="mono text-gray-400">0</span>
      </p>
      <div class="h-1 outline outline-gray-800">
        <div data-1="target" class="h-full w-full origin-left bg-gray-400">
        </div>
      </div>
    </div>
  </div>

  <!-- configure -->
  <div class="flex flex-col justify-end gap-3">
    <h3 class="text-sm font-bold tracking-tight text-gray-300">Configure.</h3>
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Lerp Factor
        <span data-int="lerpval" class="mono text-gray-400">0.3</span>
      </p>
      <div class="relative h-3">
        <input
          type="range"
          data-int="lerp"
          min="0"
          max="100"
          value="30"
          class="relative h-full w-full appearance-none bg-transparent before:absolute before:top-1/2 before:left-0 before:h-[2px] before:w-full before:bg-gray-800 [&::-webkit-slider-thumb]:relative [&::-webkit-slider-thumb]:size-3 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:bg-gray-400 [&::-webkit-slider-thumb]:hover:bg-gray-300"
        />
      </div>
    </div>
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Speed Decay
        <span data-int="speeddecayval" class="mono text-gray-400">0.85</span>
      </p>
      <div class="h-3">
        <input
          type="range"
          data-int="speeddecay"
          min="0"
          max="100"
          value="85"
          class="relative h-full w-full appearance-none bg-transparent before:absolute before:top-1/2 before:left-0 before:h-[2px] before:w-full before:bg-gray-800 [&::-webkit-slider-thumb]:relative [&::-webkit-slider-thumb]:size-3 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:bg-gray-400 [&::-webkit-slider-thumb]:hover:bg-gray-300"
        />
      </div>
    </div>
    <!-- <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Snap Strength
        <span data-int="snapstrengthval" class="mono text-gray-400">0.1</span>
      </p>
      <div class="h-3">
        <input
          type="range"
          data-int="snapstrength"
          min="0"
          max="100"
          value="10"
          class="relative h-full w-full appearance-none bg-transparent before:absolute before:top-1/2 before:left-0 before:h-[2px] before:w-full before:bg-gray-800 [&::-webkit-slider-thumb]:relative [&::-webkit-slider-thumb]:size-3 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:bg-gray-400 [&::-webkit-slider-thumb]:hover:bg-gray-300"
        />
      </div>
    </div> -->
    <div class="flex w-[30ch] flex-col gap-1">
      <p class="mono pl-2 text-gray-300">
        Drag Sensitivity
        <span data-int="dragsensval" class="mono text-gray-400">0.005</span>
      </p>
      <div class="h-3">
        <input
          type="range"
          data-int="dragsens"
          min="0"
          max="100"
          value="60"
          class="relative h-full w-full appearance-none bg-transparent before:absolute before:top-1/2 before:left-0 before:h-[2px] before:w-full before:bg-gray-800 [&::-webkit-slider-thumb]:relative [&::-webkit-slider-thumb]:size-3 [&::-webkit-slider-thumb]:appearance-none [&::-webkit-slider-thumb]:bg-gray-400 [&::-webkit-slider-thumb]:hover:bg-gray-300"
        />
      </div>
    </div>
  </div>

  <!-- toggle -->
  <div class="flex flex-col justify-end gap-3">
    <h3 class="text-sm font-bold tracking-tight text-gray-300">Toggle.</h3>
    <button
      data-1="enable"
      class="mono cursor-pointer border-l border-gray-600 p-1 px-3 text-left text-gray-300 transition-opacity hover:opacity-55"
    >
      enable (<span data-1="enableval">ON</span>)
    </button>
    <button
      data-1="snap"
      class="mono cursor-pointer border-l border-gray-600 p-1 px-3 text-left text-gray-300 transition-opacity hover:opacity-55"
    >
      snap (<span data-1="snapval">ON</span>)
    </button>
    <button
      data-1="infinite"
      class="mono cursor-pointer border-l border-gray-600 p-1 px-3 text-left text-gray-300 transition-opacity hover:opacity-55"
    >
      infinite (<span data-1="infiniteval">ON</span>)
    </button>
  </div>
</div>

<!-- slider -->
<div
  {...rest}
  tabindex="0"
  data-example="full-interface"
  class:list={[
    "py-sm flex w-screen overflow-x-hidden",
    className,
    "px-[calc(50%-40vw)] md:px-[calc(50%-15vw)]",
    "focus:outline-none",
  ]}
>
  {
    slides.map((slide, i) => (
      <div class="flex aspect-[3/4] w-[80vw] shrink-0 items-center justify-center p-1 md:w-[30vw]">
        <div class="relative h-full w-full p-8 outline outline-gray-600">
          <p class="absolute top-2 left-2 z-10">{i}</p>
          <div data-parallax class="h-full w-full outline outline-gray-800" />
        </div>
      </div>
    ))
  }
</div>

<script>
  import Core, { lerp } from "~/js/slider"
  import gsap from "~/js/gsap"

  class Slider extends Core {
    constructor(wrapper, config) {
      super(wrapper, config)

      gsap.ticker.add(this.update.bind(this))
      this.#addKeyboardEvents()
    }

    #handleKeydown = e => {
      if (!this.isVisible) return

      if (/^[0-9]$/.test(e.key)) {
        const slideIndex = parseInt(e.key)
        if (this.config.infinite) {
          this.goToIndex(slideIndex)
        } else {
          if (slideIndex > this.items.length - 1) return
          this.goToIndex(slideIndex)
        }
        return
      }

      switch (e.key) {
        case "ArrowLeft":
          this.goToPrev()
          break
        case "ArrowRight":
          this.goToNext()
          break
        case " ":
          this.goToNext()
          break
      }
    }

    #addKeyboardEvents() {
      window.addEventListener("keydown", this.#handleKeydown)
    }
  }

  /** Interface */
  const speedbar = document.querySelector('[data-1="speed"]')
  const progressbar = document.querySelector('[data-1="progress"]')
  const progressval = document.querySelector('[data-1="progressval"]')
  const speedval = document.querySelector('[data-1="speedval"]')
  const snapbtn = document.querySelector('[data-1="snap"]')
  const enablebtn = document.querySelector('[data-1="enable"]')
  const snapval = document.querySelector('[data-1="snapval"]')
  const enableval = document.querySelector('[data-1="enableval"]')
  const currentbar = document.querySelector('[data-1="current"]')
  const currentval = document.querySelector('[data-1="currentval"]')
  const targetbar = document.querySelector('[data-1="target"]')
  const targetval = document.querySelector('[data-1="targetval"]')
  const slideval = document.querySelector('[data-1="slideval"]')
  const infinitebtn = document.querySelector('[data-1="infinite"]')
  const infiniteval = document.querySelector('[data-1="infiniteval"]')

  /** Callbacks */
  let easedProgress = 0
  const onUpdate = slider => {
    const { speed, progress, current, target, items } = slider
    speedbar.style.transform = `translateX(${speed * 500}%)`

    easedProgress = lerp(easedProgress, progress, 0.1)

    progressbar.style.transform = `scaleX(${easedProgress * 100}%)`
    progressval.textContent = easedProgress.toFixed(2)
    speedval.textContent = speed.toFixed(2)

    const p_current = current % items.length
    const p_target = target % items.length
    currentbar.style.transform = `scaleX(${(Math.abs(p_current) / items.length) * 100}%)`
    currentval.textContent = p_current.toFixed(4)

    targetbar.style.transform = `scaleX(${(Math.abs(p_target) / items.length) * 100}%)`
    targetval.textContent = p_target.toFixed(4)
  }

  const onSlideChange = (slide, previous) => {
    slider.items[previous].children[0].classList.remove("active")
    slider.items[slide].children[0].classList.add("active")
    slideval.textContent = slide
  }

  /** Slider */
  const slider = new Slider(
    document.querySelector('[data-example="full-interface"]'),
    {
      paused: true,
      onSlideChange,
      onUpdate,
    }
  )

  // initial state
  onSlideChange(0, 0)

  /** Interactions */
  snapbtn.onclick = () => {
    slider.config.snap = !slider.config.snap
    snapval.textContent = slider.config.snap ? "ON" : "OFF"
  }

  enablebtn.onclick = () => {
    slider.paused = !slider.paused
    enableval.textContent = slider.paused ? "OFF" : "ON"
  }

  infinitebtn.onclick = () => {
    slider.config.infinite = !slider.config.infinite
    infiniteval.textContent = slider.config.infinite ? "ON" : "OFF"

    slider.goToIndex(0)

    if (!slider.config.infinite) {
      slider.items.forEach((_, i) => {
        slider.parallaxItems[i].forEach(({ element, value }) => {
          element.style.transform = ``
        })
      })
    }
  }

  // configure
  const lerpval = document.querySelector('[data-int="lerpval"]')
  const speeddecayval = document.querySelector('[data-int="speeddecayval"]')
  const lerprange = document.querySelector('[data-int="lerp"]')
  const speeddecayrange = document.querySelector('[data-int="speeddecay"]')
  const snapstrengthval = document.querySelector('[data-int="snapstrengthval"]')
  const snapstrengthrange = document.querySelector('[data-int="snapstrength"]')
  const dragsensval = document.querySelector('[data-int="dragsensval"]')
  const dragsensrange = document.querySelector('[data-int="dragsens"]')

  const onRangeInput = range => {
    const val = range.value * 0.01
    lerpval.textContent = val.toFixed(2)
    slider.config.lerpFactor = val
  }

  const onSpeedDecayInput = range => {
    const val = 0.5 + range.value * 0.01 * 0.49 // Maps 0-100 to 0.5-0.99
    speeddecayval.textContent = val.toFixed(2)
    slider.config.speedDecay = val
  }

  // const onSnapStrengthInput = range => {
  //   const val = range.value * 0.1
  //   snapstrengthval.textContent = val.toFixed(2)
  //   slider.config.snapStrength = val
  // }

  const onDragSensInput = range => {
    const val = 0.0005 + (range.value * 0.0085) / 100 // Maps 0-100 to 0.0005-0.009
    dragsensval.textContent = val.toFixed(4)
    slider.config.dragSensitivity = val
  }

  lerprange.oninput = () => onRangeInput(lerprange)
  speeddecayrange.oninput = () => onSpeedDecayInput(speeddecayrange)
  dragsensrange.oninput = () => onDragSensInput(dragsensrange)
  // snapstrengthrange.oninput = () => onSnapStrengthInput(snapstrengthrange)
</script>

<style>
  input[type="range"] {
    position: relative;
  }

  input[type="range"]::before {
    content: "";
    position: absolute;
    left: 0;
    top: 50%;
    height: 2px;
    width: 100%;
    background: rgb(31 41 55);
    transform: translateY(-50%);
    pointer-events: none;
  }

  input[type="range"]::-moz-range-thumb {
    appearance: none;
    width: 12px;
    height: 12px;
    background: rgb(156 163 175);
    border: none;
    cursor: pointer;
  }

  input[type="range"]::-moz-range-thumb:hover {
    background: rgb(209 213 219);
  }

  input[type="range"]::-moz-range-track {
    appearance: none;
    background: transparent;
    border: none;
  }

  .active {
    outline-color: white;
    transition: outline-color 0.5s ease-in-out;
    transition-delay: 0.2s;
  }
</style>
